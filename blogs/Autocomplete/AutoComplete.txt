In my last post, I decided to clean house and close a bunch of bugs that have been hanging around my backlog. Some of these bug fixes had to do with issues related to the `Undo` feature that I had implemented a while back. I also solved bugs related to the rendering of a card after performing certain operations, and issues related to toggling the `Outline` feature on/off. There was also a small fix that I did on the UI side so that vertical spacing between cards on each of the Tableau views would be consistent with that of the original game.

The feature that I will present to you today is the `Autocomplete` feature. This feature builds off the Automove feature where you double click on a card, and on the second mouse down of that card, an attempt will be performed to move that card to a valid position on one of the Foundation views, with priority given to the left-most Foundation position. I also closed up a bunch of bugs from the backlog as well, along with some bugs that were introduced because of this feature that was implemented.

The Autocomplete feature takes this a step further by automating this feature with respect to a certain set of cards on the board. The idea with being able to Autocomplete is that the user performs a right-click action anywhere on the board, including on any card available on the Tableau, or the Stock, or any card on the Talon pile.

When this occurs, all top-most face-up cards on the Talon and Tableau piles will be auto-moved (if the move is valid) towards the Foundation view. This is a simple way to be able to move all your cards to the Foundation piles without having to drag the card over it or double click each individual card.

Here is what the code looks like.

    /**
     * Performs an auto complete based on all available cards
     */
    private static void performCardsAutocomplete() {
        ViewFactory viewFactory = AbstractFactory.getFactory(ViewFactory.class);
        List<CardView> cards = new ArrayList<CardView>();
        
        // Get the top-most talon card
        CardView talonCard = viewFactory.get(TalonPileView.class).getLastCard();
        if(talonCard != null) {
            cards.add(talonCard);
        }
        
        // Get all available top-most front-facing cards
        List<TableauPileView> tableauPileViews = viewFactory.getAll(TableauPileView.class);
        Collections.reverse(tableauPileViews);
        for(TableauPileView view : tableauPileViews) {
            CardView card = view.getLastCard();
            if(card != null && !card.isBacksideShowing()) {
                cards.add(card);
            }
        }
        
        // Go through the list and apply the automove on each card until there are no cards
        // left or all cards have been iterated over
        while(cards.size() > 0) {
            boolean keepGoing = false;
            for(int i = 0; i < cards.size(); ++i) {
                if(cards.get(i).performCardAutoMovement()) {
                    cards.remove(i);
                    keepGoing = true;
                    break;
                }
            }
            
            if(!keepGoing) {
                break;
            }
        }
        
        // If the talon card was moved then enabled the top-most card so that the next card can be played
        // TODO Can this be self-contained??
        if(talonCard != null && !cards.contains(talonCard)) {
            CardView lastTalonCard = viewFactory.get(TalonPileView.class).getLastCard();
            if(lastTalonCard != null) {
                lastTalonCard.setEnabled(true);
            }
        }
    }

Based on the code above, this is how the functionality works. The first step is to gather the cards that will be operated on. So we create a list and populate it with the current card that is on the Talon (if any). After that, I go through each Foundation pile (starting at the left-most pile), and I try to get the top-most (card all the way at the bottom) if and only if the card has it's front face showing. So, the priority for these cards is Talon pile first followed by Tableau piles second starting with the left-most pile.

The next step is to go through this left, and for each card attempt to perform an Automove to the foundation. If a card can be Automoved, then I remove that card from the list and start the process all over again until I reach the end, or I have no more cards left in my list.

Finally, I handle an edge case (Bug #142 shown below) that ensures that if the card from the Talon was moved, I initiate a method call to enable the next card. Ideally, this should be self-contained within the Talon, so I put a TODO within the comments and hopefully when I go through and refactor the code or solve a bug / implement a feature related to this I can include the change in that changeset

Here is an example of the Autocomplete feature in action

<<insert_here>>

Apart from the Autocomplete feature, I solved a bunch of bugs that I present to you below.

1. After performing an automove, the talon card is not enabled
https://github.com/danielricci/solitaire/issues/142

2. Going from outline to non-outline with draw three lets you choose any of the three cards and not the right-most one only
https://github.com/danielricci/solitaire/issues/141

3. Dragging a foundation card will think it collided with itself, preventing an undo from happening
https://github.com/danielricci/solitaire/issues/145

4. Performing an undo when an ace goes to the foundation from the tableau does not always work
https://github.com/danielricci/solitaire/issues/135

5. When playing with a timer on, a dragged card still resets to the stock position
https://github.com/danielricci/solitaire/issues/147

6. Going from outline to non-outline doesn't let you move any tableau cards
https://github.com/danielricci/solitaire/issues/150

7. (Draw Three) - Going from outline to non-outline and then dragging a card and letting go puts it in the wrong position
https://github.com/danielricci/solitaire/issues/146

8. Opening the deck dialog and clicking OK will populate the wrong selected item
https://github.com/danielricci/solitaire/issues/140

The next feature that I am going to work on is the win animation screen. You all know (should know) what this looks like, and I have been waiting a while to get this one done. There a couple of known bugs that need to be fixed as well, along with a couple of UI tweaks and a nice code cleanup pass. There are some translations that I need to fill in as well, and I have a few days of solid testing for both Mac and PC before stamping the game as done.

You can always follow my progress by following the game located at https://github.com/danielricci/solitaire and if you have any questions I will do my best to answer them. 

Take care, until my next blog post. 
