In my last post, I implemented the `Card Back` deck selection feature, which allows you to choose between 12 built-in deck images that would change the card backs of all the cards in the game. You can view the blog post <<<here>>>.

The next feature that I implemented was the ability to play Solitaire using the `Draw Three` game mode, which allows you to play the game using three cards at a time. I also added the functionality for scoring when in this mode for both `Vegas` and `Standard`.

Here is what the `Draw Three` game mode looks like, and how to set the game for this mode.

From the `File` menu, choose `Options`. When the dialog open, click on the `Draw Three` radio button, and then click on `OK`. 

<Options dialog image>

You will notice that your game will restart, and you will now have three cards drawn at a time when you click on your Stock card.

<Show the game when playing with three cards>

This feature took quite a while for me to implement as there were a lot of small things that I had to change.  Here is the list of features/functionalities that I had to work on to get my game to support the `Draw Three` game mode.

1. When clicking on the Stock card, three cards should be loaded at a time instead of one.

This was simply a matter of taking the `blank card` that I use to partition my deck when playing in `Draw One`, and have it skip three cards at a time instead of one. At this point, all three cards will be stacked on top of each other, however, my next task would fix that up even further by applying an offset to each card.

2. When three cards are shown, they should be rendered next to each other.

This task was done to compliment my first task. When loading three cards at a time, all that I needed to do was iterate through each card, and multiply the x-axis location of the card by (iteration * 12px).

Because of the GridBagLayout that I use to render the different piles in the game, I had some trouble with this at first. mostly with the view chopping off the two right-most cards because the view was initially only ever sized for rendering at most one card. 

I tried to take row 0, columns 1 and column 2, and merge them both together using a `colspan` in one of my GridBagConstraints, however this would cause some alignment problems, so I instead played with the insets and padding of the view, so that three cards could be rendered without any of the cards being chopped.

Here is some of the code that I wrote to achieve this.

<insert Java code here, GameView line 95>

3. When three cards are loaded, the right-most card should be the only card that can be interacted with.

This was a little bit tricky because I didn't want to introduce a flag and then have to manage that depending on the different states of the game. Experience has taught me just how difficult it can be to manage the many different states of an object, and the more flags that you add to a class, the more things can go wrong.

Therefore, I overwrote the setEnabled method of my view, and I would instead toggle mouse events associated with that view. I had to do this for both the CardView and the CardOutline since they both do not have a common class that they inherit from as of yet, apart from the generic PanelView class that is Engine specific and I didn't want to put the game-specific code in the engine.

<insert code here>

4. When a single card from the three card pile moves to the Tableau or the Foundation pile, the next right-most card should now be playable.

This involved two sub-tasks that I needed to introduce into the game. The first was to introduce a `mouseReleased` event on a card within the Talon deck, such that when the event would occur, I would verify if the card that was just dragged still exists in the Talon. 

If the card existed then the move was invalid, so do nothing with the other cards. If the card was moved then take the right-most card and enable it. If there are no more cards left, show the at-most-three cards played and enable the right-most card there.

<show code here>

5. When playing using the `Vegas` scoring style, you should only be able to go through the entire deck at most three times

This code was actually already in place, however, there is currently no art to show that the deck can no longer be recycled. Here is the task for adding the required art to the Stock view.

https://github.com/danielricci/solitaire/issues/39

6. When playing using the `Draw Three` game mode using the `Standard` scoring style, 20 points should be taken off of the score whenever a deck has been recycled.

This was very straight-forward, here is the code for doing this.

<insert code here>

7. When playing using the `Draw Three` game mode, showing three cards should hide the currently shown cards.

By default, all cards are now marked as not having any visibility. When the three cards come into play, their visibility is shown, and when the card deck re-cycles, their visibility is set back to hidden. When the next set of three cards is shown, the previous at-most-three cards have their visibility set to hidden.

8. When playing using the `Draw Three` game mode, if you move the three currently shown cards, the previously shown cards should now be made visible to you.

This involves looking for my hidden `Blank Card` that keeps tabs of where I am in the current deck. When all three cards have been dragged to one of the other piles (Foundation or Tableau) in the game, I use the blank card index to look for the three cards with a layer of +1,+2, and +3 to that of the blank card. Obviously, this will go up to at most three cards, to avoid any `IndexOutOfBoundsException` issues from being occurring.

Here is the code related to that bit.

<insert code here>

Here are the other issues that I worked on. I have linked the bug issues that I logged, in there I have included screenshots of the actual issue, and you can also go and take a look at the changeset that solves that issue.

1. You can now press on the `Enter` key when in the Options dialog instead of clicking on the `OK` button

Issue<https://github.com/danielricci/solitaire/issues/104>
Changeset<https://github.com/danielricci/solitaire/commit/832891bb9c00635073401ce60d51f11fb3d8495d>

2. I fixed a bug where when you would play using the  `Draw Three` game mode using the `Outline` option, you could draw all three cards` outline instead of just the right-most card.

Issue<https://github.com/danielricci/solitaire/issues/105>
Changeset<https://github.com/danielricci/solitaire/commit/ea65c2b68d07d0811758016ecc37cb61a8183753>

3. I fixed a bug where when you were using the `Outline` option, after performing a double-click on a card, if you were to hold the mouse down on the second click and keep it held, the outline would still be visible on the card. This was more of a rendering artifact, however, I still wanted to correct it.

Issue<https://github.com/danielricci/solitaire/issues/106>
Changeset<https://github.com/danielricci/solitaire/commit/014727604b27205a1ec7be23aa6c7f4b30406751>

4. I fixed a bug where while playing using the `Draw Three` game mode, if you were to move one card and then play through the entire deck, the next time that you would play through the deck, one of the cards` visibility property would not properly reset, causing the cards currently shown to be offset improperly

Issue<https://github.com/danielricci/solitaire/issues/108>
Changeset<https://github.com/danielricci/solitaire/commit/a03a05d08fbf103c6f5021513fad427943014cd7>

5. Added some enhanced logging to better debug the `Draw-Three` game mode.

I linked the changeset under the main task for the `Draw Three` game mode, however, I will give an explanation below on how this all works and what the symbols actually mean.

https://github.com/danielricci/solitaire/issues/12

<insert logs and explanation here>